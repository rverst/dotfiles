#!/usr/bin/env zsh
#
# Helper script for managing sensitive files
#

set -o errexit
set -o nounset
set -o pipefail

__dir="$(cd "$(dirname "$0")" && pwd)"

DOTFILES_DIR=${__dir}

source "$__dir/.scripts/print.sh"
source "$__dir/.scripts/utils.sh"

usage() {
	echo "Secret file management helper"
	echo ""
	echo "Usage:"
	echo ""
	echo "  secret <command> <relative/path/to/file>"
	echo ""
	echo "The commands are:"
	echo ""
	echo "  new     create a new encrypted file"
	echo "  edit    edit an existing encrypted file"
	echo "  view    view contents of an encrypted file"
	echo ""
	echo "Example:"
	echo "  secret new .config/myapp/credentials"
	echo "  secret edit .ssh/config"
	echo ""
}

function get_private_path() {
	local file="$1"
	local env=$(get_config "core.environment")
	if [[ -z "${env}" ]]; then
		fail "Environment not configured. Please run dotfiles install first."
		exit 1
	fi
	echo "${DOTFILES_DIR}/.private/${env}/${file}"
}

function ensure_dir() {
	local dir="$(dirname "$1")"
	if [[ ! -d "${dir}" ]]; then
		mkdir -p "${dir}"
	fi
}

function edit_secret() {
	local rel_path="$1"
	local full_path=$(get_private_path "${rel_path}")
	local temp_file=$(mktemp)

	ensure_dir "${full_path}"

	if [[ -f "${full_path}" ]]; then
		gpg --batch --yes --decrypt "${full_path}" >"${temp_file}" || {
			rm -f "${temp_file}"
			fail "Failed to decrypt file"
			return 1
		}
	fi

	${EDITOR:-vim} "${temp_file}"

	local key_id=$(get_config "gpg.key")
	if [[ -z "${key_id}" ]]; then
		fail "GPG key not configured. Please run dotfiles install first."
		rm -f "${temp_file}"
		exit 1
	fi

	gpg --batch --yes --encrypt --recipient "${key_id}" <"${temp_file}" >"${full_path}"
	rm -f "${temp_file}"

	success "File saved and encrypted: ${full_path}"
}

function view_secret() {
	local rel_path="$1"
	local full_path=$(get_private_path "${rel_path}")
	gpg --batch --yes --decrypt "${full_path}" | ${PAGER:-less}
}

[[ $# -eq 0 ]] && {
	usage
	exit 1
}

case "$1" in
new)
	[[ -z "$2" ]] && {
		usage
		exit 1
	}
	edit_secret "$2"
	;;
edit)
	[[ -z "$2" ]] && {
		usage
		exit 1
	}
	full_path=$(get_private_path "$2")
	[[ ! -f "${full_path}" ]] && {
		fail "File not found: ${full_path}"
		exit 1
	}
	edit_secret "$2"
	;;
view)
	[[ -z "$2" ]] && {
		usage
		exit 1
	}
	full_path=$(get_private_path "$2")
	[[ ! -f "${full_path}" ]] && {
		fail "File not found: ${full_path}"
		exit 1
	}
	view_secret "$2"
	;;
*)
	usage
	exit 1
	;;
esac
